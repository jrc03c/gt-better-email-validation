---------------------------------------------------
-- RULES (given the form "handle@domain.extension")
---------------------------------------------------
-- the whole address must contain @ and .
-- the handle must contain at least one character
-- the domain must contain at least one character
-- the domain must contain at least one .
-- any characters are valid in the handle (except spaces)
-- any characters are valid in the domain (except spaces)
-- the domain extension must be in the list of top level domains (unless the "domain" is an IP address? could that even work?)

>> thoroughEmailValidatorUpperToLower = {{ upperToLower }}

*if: not thoroughEmailValidationInput
	*page
		*component
			*classes: alert alert-warning
			ERROR: An email address is required for validation!

>> thoroughEmailValidationCounter = 1
>> thoroughEmailValidationHandle = ""
>> thoroughEmailValidationDomain = ""
>> thoroughEmailValidationDomainExtension = ""
>> thoroughEmailValidationPhase = "handle"
>> thoroughEmailValidationOutput = "yes"
>> thoroughEmailValidationFailPhase = "none"
>> thoroughEmailValidationFailIndex = -1
>> thoroughEmailValidationFailChar = ""
>> thoroughEmailValidationFailMessage = ""

-- check that there are no spaces in the address
>> stringSplitterInput = {"string" -> thoroughEmailValidationInput, "delimiter" -> " "}
*program: String Splitter

*if: stringSplitterOutput.size > 1
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "all"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "Email addresses cannot contain spaces."
	*return

-- break address into handle and domain
>> stringSplitterInput = {"string" -> thoroughEmailValidationInput, "delimiter" -> "@"}
*program: String Splitter

*if: stringSplitterOutput.size < 2
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "all"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "An email address must be in the form 'handle@domain.extension'. The email address you entered did not contain an '@' character."
	*return

*if: stringSplitterOutput.size > 2
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "all"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "An email address must be in the form 'handle@domain.extension'. The email address you entered contained more than one '@' character."
	*return

>> thoroughEmailValidationHandle = stringSplitterOutput[1]
>> thoroughEmailValidationDomain = stringSplitterOutput[2]

*if: thoroughEmailValidationHandle.size = 0
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "handle"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "The handle of an email address (the part before the '@' character) must contain at least one character."
	*return

*if: thoroughEmailValidationDomain.size < 3
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "domain"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "The domain of an email address (the part after the '@' character) must contain at least three characters, at least one of which must be a period."
	*return

-- break domain into subdomain(s) + domain and extension
>> stringSplitterInput = {"string" -> thoroughEmailValidationDomain, "delimiter" -> "."}
*program: String Splitter

*if: stringSplitterOutput.size < 2
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "domain"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "The domain of an email address (the part after the '@' character) must contain a period."
	*return

*if: stringSplitterOutput[1].size = 0
	>> thoroughEmailValidatorUpperToLower = ""
	>> thoroughEmailValidationOutput = "no"
	>> thoroughEmailValidationFailPhase = "domain"
	>> thoroughEmailValidationFailIndex = 1
	>> thoroughEmailValidationFailChar = ""
	>> thoroughEmailValidationFailMessage = "The second-level domain of an email address (the part after the '@' character that comes before the final extension (like '.com' or '.org')) must be at least one character in length."
	*return

-- convert extension to lowercase
>> thoroughEmailValidationDomainExtension = stringSplitterOutput[stringSplitterOutput.size]
>> thoroughEmailValidationCounter = 1
>> thoroughEmailValidationDomainExtensionTemp = ""

*while: thoroughEmailValidationCounter <= thoroughEmailValidationDomainExtension.size
	*if: thoroughEmailValidatorUpperToLower[thoroughEmailValidationDomainExtension[thoroughEmailValidationCounter]]
		>> thoroughEmailValidationDomainExtensionTemp = "{thoroughEmailValidationDomainExtensionTemp}{thoroughEmailValidatorUpperToLower[thoroughEmailValidationDomainExtension[thoroughEmailValidationCounter]]}"
	*if: not (thoroughEmailValidatorUpperToLower[thoroughEmailValidationDomainExtension[thoroughEmailValidationCounter]])
		>> thoroughEmailValidationDomainExtensionTemp = "{thoroughEmailValidationDomainExtensionTemp}{thoroughEmailValidationDomainExtension[thoroughEmailValidationCounter]}"
	>> thoroughEmailValidationCounter = thoroughEmailValidationCounter + 1

>> thoroughEmailValidationDomainExtension = thoroughEmailValidationDomainExtensionTemp

-- confirm that the extension is a valid top-level domain
{{ topLevelConditionals }}

>> thoroughEmailValidatorUpperToLower = ""
>> thoroughEmailValidationOutput = "no"
>> thoroughEmailValidationFailPhase = "domain"
>> thoroughEmailValidationFailIndex = 1
>> thoroughEmailValidationFailChar = ""
>> thoroughEmailValidationFailMessage = "The domain extension in this email address is not a valid extension. Valid domain extensions are things like '.com' or '.org'. The full list of valid domain name extensions is available here: http://data.iana.org/TLD/tlds-alpha-by-domain.txt"
*return
